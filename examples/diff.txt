{-
 Since our algorithm allows non-deterministic program, 
 we can derive patch from diff.

 Note that in this case, the "diff" definition copied from this file
 is not that usefull because Haskell, being functional, disallows
 non-deterministic programs.
-}

diff(Nil,Nil) = Pair(Nil,Nil)
diff(Cons(a,x), y) 
   = let Pair(org,ops) = diff(x,y)
     in  Pair(Cons(a,org), Cons(Del,ops))
diff(x,Cons(b,y))
   = let Pair(xr, ops) = diff(x,y)
     in  Pair(xr, Cons(Ins(b),ops))
diff(Cons(a,x),Cons(b,y))
   = let    Right(c) = eqCheck(a,b) 
     in let Pair(org,ops) = diff(x,y)
     in  Pair(Cons(a,org), Cons(Keep,ops))


-- let1(a,Pair(org,ops)) = 
--    Pair(Cons(a,org), Cons(Del,ops))
-- let2(b,Pair(Cons(a,org),ops)) =
--    Pair(Cons(a,org), Cons(Ins(b),ops))
-- let3(Right(a),Pair(org,ops)) =
--    Pair(Cons(a,org), Cons(Keep,ops))

eqCheck(B0,B1) = Left(Pair(B0,B1))
eqCheck(B1,B0) = Left(Pair(B1,B0))
eqCheck(B0,B0) = Right(B0)
eqCheck(B1,B1) = Right(B1)


